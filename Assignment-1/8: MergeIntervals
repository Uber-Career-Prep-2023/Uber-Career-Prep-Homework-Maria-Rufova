'''
8. MergeIntervals
Given a list of integer pairs representing the low and high end of an interval, 
inclusive, return a list in which overlapping intervals are merged.

Technique: Sort, then Solve ("transform and conquer")
Time Complexity: O(NlogN) --> sorting is NlogN
Space Complexity: O(N) 
Time Taken: 40

Notes:
1. Kind of looks like sets problems I've done in class 
2. 
'''

def mergeIntervals(array):
    solution = []

    array = [list(pair) for pair in array] #easier to work with lists
    array.sort(key = lambda x: x[0]) #sort by 1st elem of every interval
    #(2, 3), (4, 8), (1, 2) --> (1, 2), (2, 3), (4, 8)

    for interval in array:
        start = interval[0]
        end = interval[1]

        # if the solution array is empty
        # OR the last interval saved in solution doesn't overlap with current interval (last end less than curr start)
        #add a new interval to solution
        if (not solution) or (solution[len(solution)-1][1] < start):
            solution.append(interval)

        #but if there's an overlap, merge the last and the curr intervals
        
        else:
            #the start of the last entered interval may decrease
            solution[len(solution)-1][0] = min (start, solution[len(solution)-1][0])
            #the end of the last entered interval may increase
            solution[len(solution)-1][1] = max (end, solution[len(solution)-1][1])



    return solution

#Test Cases:

#From the spec
print(mergeIntervals([(2, 3), (4, 8), (1, 2), (5, 7), (9, 12)])) 
#Output: [[1, 3], [4, 8], [9, 12]]

print(mergeIntervals([(5, 8), (6, 10), (2, 4), (3, 6)])) 
#Output: [[2, 10]]

print(mergeIntervals([(10, 12), (5, 6), (7, 9), (1, 3)])) 
#Output: [[1, 3], [5, 6], [7, 9], [10, 12]]

#Edge Cases:

#emptry array
print(mergeIntervals([])) 
#Output:[]

#same intervals
print(mergeIntervals([(1, 7), (1, 7), (1, 7), (1, 7)])) 
#Output: [[1, 7]]

#intervals with same start and end 
print(mergeIntervals([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])) 
#Output: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]
