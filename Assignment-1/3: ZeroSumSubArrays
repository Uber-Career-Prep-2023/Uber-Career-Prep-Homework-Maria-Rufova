'''
3. ZeroSumSubArrays
Given an array of integers, count the number of subarrays that sum to zero.

Technique: Growing / Shrinking Sliding Window
Time Complexity: O(n^2)
Space Complexity: O(n) --> Correction: O(1)
Time Taken: 40+

Notes:
1. PythonTutor is SO helpful for this problem
2. Tried to use a hashmap somehow right away to make my solution optimal,
    but I really struggled in the process and ended up reverting to a for-loop

3. can be OPTIMIZED
'''

def zeroSumSubArrays(array):

    sumsOfZero = 0
    for i in range(len(array)):
        currentSum = 0
        item = i
        while item < len(array):
            currentSum += array[item]
            if currentSum == 0:
                sumsOfZero += 1
            item += 1
        i += 1
    return sumsOfZero

#Test Cases:

#The following 3 test cases were given in the spec.
print(zeroSumSubArrays([4, 5, 2, -1, -3, -3, 4, 6, -7])) 
#Output: 2    Subarrays: [5, 2, -1, -3, -3] , [-3, 4, 6, -7]

print(zeroSumSubArrays([1, 8, 7, 3, 11, 9]))  
#Output: 0   Subarrays: 

print(zeroSumSubArrays([8, -5, 0, -2, 3, -4])) 
#Output: 2    Subarrays: [0] , [8, -5, 0, -2, 3, -4]


#Edge Cases:
#empty array
print(zeroSumSubArrays([])) #Output: 0  Subarrays: 

#only positive
print(zeroSumSubArrays([5, 6, 2, 3, 8, 9])) #Output: 0  Subarrays:

#only negative
print(zeroSumSubArrays([-5, -6, -2, -3, -8, -9])) #Output: 0  Subarrays:

# both
print(zeroSumSubArrays([45, 6, 2, -2, -6, 1, 2, -2, -1])) #Output: 5  
#Subarrays: [6, 2, -2, -6], [2, -2], [1, 2, -2, -1], [2, -2], [6, 2, -2, -6, 1, 2, -2, -1]

# sorted
print(zeroSumSubArrays([-2, -1, 0, 1, 2, 3, 4, 5])) #Output: 3  
#Subarrays: [-2, -1, 0, 1, 2], [-1, 0, 1], [0]

# unsorted
print(zeroSumSubArrays([5, 3, -1, -2, 4, 0, 1, 2])) #Output: 2  
#Subarrays: [3, -1, -2], [0]