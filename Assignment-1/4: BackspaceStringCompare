'''
4. BackspaceStringCompare

Given two strings representing series of keystrokes, determine whether the resulting text is the same. 
Backspaces are represented by the '#' character so "x#" results in the empty string ("").


Technique: Simultanious Iteration Two-Pointer
Time Complexity: O(n)
Space Complexity: O(n) (or maybe O(n^2)? . . . unsure)
Time Taken: 12 minutes

Notes:
1. 
'''


def backspaceStringCompare(str1 , str2):
    str1List = []
    str2List = []

    for character in str1: 
        if character != "#":
          str1List.append(character)
        elif len(str1List) > 0:
            str1List.pop()

    for character in str2: 
        if character != "#":
          str2List.append(character)
        elif len(str2List) > 0:
            str2List.pop()

    return str1List == str2List


#Test Cases:

#The following 4 test cases were given in the spec.
print(backspaceStringCompare("abcde" , "abcde")) 
#Output: True

print(backspaceStringCompare("Uber Career Prep" , "u#Uber Careee#r Prep"))  
#Output: True    

print(backspaceStringCompare("abcdef###xyz", "abcw#xyz")) 
#Output: True  

print(backspaceStringCompare("abcdef###xyz", "abcdefxyz###")) 
#Output: False 


#Edge Cases:

#empty strings
print(backspaceStringCompare("" , "")) #Output: True

#strings only with 3 #'s each
print(backspaceStringCompare("###" , "###")) #Output: True

#strings with different amounts of #'s
print(backspaceStringCompare("#####" , "##")) #Output: True

#strings where every letter gets deleted
print(backspaceStringCompare("s#p#r#i#n#g#" , "summer######")) #Output: True

#another test with strings with different final outputs
print(backspaceStringCompare("croi#ssa##nt" , "c#roi##sant")) #Output: False
